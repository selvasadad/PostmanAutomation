{
	"info": {
		"_postman_id": "02b6643b-47cf-4e56-baaa-40f091841277",
		"name": "AutomationSample",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "users",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bf832eb6-5765-441a-bfa9-c50098fb513d",
						"exec": [
							"",
							"",
							"var schema = {",
							"",
							"  \"definitions\": {},",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"$id\": \"http://example.com/root.json\",",
							"  \"type\": \"object\",",
							"  \"title\": \"The Root Schema\",",
							"  \"required\": [",
							"    \"page\",",
							"    \"per_page\",",
							"    \"total\",",
							"    \"total_pages\",",
							"    \"data\"",
							"  ],",
							"  \"properties\": {",
							"    \"page\": {",
							"      \"$id\": \"#/properties/page\",",
							"      \"type\": \"integer\",",
							"      \"title\": \"The Page Schema\",",
							"      \"default\": 0,",
							"      \"examples\": [",
							"        3",
							"      ]",
							"    },",
							"    \"per_page\": {",
							"      \"$id\": \"#/properties/per_page\",",
							"      \"type\": \"integer\",",
							"      \"title\": \"The Per_page Schema\",",
							"      \"default\": 0,",
							"      \"examples\": [",
							"        3",
							"      ]",
							"    },",
							"    \"total\": {",
							"      \"$id\": \"#/properties/total\",",
							"      \"type\": \"integer\",",
							"      \"title\": \"The Total Schema\",",
							"      \"default\": 0,",
							"      \"examples\": [",
							"        12",
							"      ]",
							"    },",
							"    \"total_pages\": {",
							"      \"$id\": \"#/properties/total_pages\",",
							"      \"type\": \"integer\",",
							"      \"title\": \"The Total_pages Schema\",",
							"      \"default\": 0,",
							"      \"examples\": [",
							"        4",
							"      ]",
							"    },",
							"    \"data\": {",
							"      \"$id\": \"#/properties/data\",",
							"      \"type\": \"array\",",
							"      \"title\": \"The Data Schema\",",
							"      \"items\": {",
							"        \"$id\": \"#/properties/data/items\",",
							"        \"type\": \"object\",",
							"        \"title\": \"The Items Schema\",",
							"        \"required\": [",
							"          \"id\",",
							"          \"first_name\",",
							"          \"last_name\",",
							"          \"avatar\"",
							"        ],",
							"        \"properties\": {",
							"          \"id\": {",
							"            \"$id\": \"#/properties/data/items/properties/id\",",
							"            \"type\": \"integer\",",
							"            \"title\": \"The Id Schema\",",
							"            \"default\": 0,",
							"            \"examples\": [",
							"              7",
							"            ]",
							"          },",
							"          \"first_name\": {",
							"            \"$id\": \"#/properties/data/items/properties/first_name\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The First_name Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"Michael\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"last_name\": {",
							"            \"$id\": \"#/properties/data/items/properties/last_name\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Last_name Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"Lawson\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"avatar\": {",
							"            \"$id\": \"#/properties/data/items/properties/avatar\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Avatar Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"https://s3.amazonaws.com/uifaces/faces/twitter/follettkyle/128.jpg\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          }",
							"        }",
							"      }",
							"    }",
							"  }",
							"",
							"};",
							"",
							"//var jsondata=JSON.parse(responsseBody);",
							"  var jsonData2 = pm.response.json();",
							"",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData2, schema)).to.be.true;",
							"  pm.expect(tv4.validate(jsonData2, schema)).to.be.true;",
							"});",
							"",
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"excepected response time is ok \", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"pm.test(\"response must be valid and have a body\", function () {",
							"     // assert that the status code is 200",
							"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
							"     // assert that the response has a valid JSON body",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/users?page=2",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "users Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bf832eb6-5765-441a-bfa9-c50098fb513d",
						"exec": [
							"",
							"",
							"var schema = {",
							"",
							"  \"definitions\": {},",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"$id\": \"http://example.com/root.json\",",
							"  \"type\": \"object\",",
							"  \"title\": \"The Root Schema\",",
							"  \"required\": [",
							"    \"page\",",
							"    \"per_page\",",
							"    \"total\",",
							"    \"total_pages\",",
							"    \"data\"",
							"  ],",
							"  \"properties\": {",
							"    \"page\": {",
							"      \"$id\": \"#/properties/page\",",
							"      \"type\": \"integer\",",
							"      \"title\": \"The Page Schema\",",
							"      \"default\": 0,",
							"      \"examples\": [",
							"        3",
							"      ]",
							"    },",
							"    \"per_page\": {",
							"      \"$id\": \"#/properties/per_page\",",
							"      \"type\": \"integer\",",
							"      \"title\": \"The Per_page Schema\",",
							"      \"default\": 0,",
							"      \"examples\": [",
							"        3",
							"      ]",
							"    },",
							"    \"total\": {",
							"      \"$id\": \"#/properties/total\",",
							"      \"type\": \"integer\",",
							"      \"title\": \"The Total Schema\",",
							"      \"default\": 0,",
							"      \"examples\": [",
							"        12",
							"      ]",
							"    },",
							"    \"total_pages\": {",
							"      \"$id\": \"#/properties/total_pages\",",
							"      \"type\": \"integer\",",
							"      \"title\": \"The Total_pages Schema\",",
							"      \"default\": 0,",
							"      \"examples\": [",
							"        4",
							"      ]",
							"    },",
							"    \"data\": {",
							"      \"$id\": \"#/properties/data\",",
							"      \"type\": \"array\",",
							"      \"title\": \"The Data Schema\",",
							"      \"items\": {",
							"        \"$id\": \"#/properties/data/items\",",
							"        \"type\": \"object\",",
							"        \"title\": \"The Items Schema\",",
							"        \"required\": [",
							"          \"id\",",
							"          \"first_name\",",
							"          \"last_name\",",
							"          \"avatar\"",
							"        ],",
							"        \"properties\": {",
							"          \"id\": {",
							"            \"$id\": \"#/properties/data/items/properties/id\",",
							"            \"type\": \"integer\",",
							"            \"title\": \"The Id Schema\",",
							"            \"default\": 0,",
							"            \"examples\": [",
							"              7",
							"            ]",
							"          },",
							"          \"first_name\": {",
							"            \"$id\": \"#/properties/data/items/properties/first_name\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The First_name Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"Michael\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"last_name\": {",
							"            \"$id\": \"#/properties/data/items/properties/last_name\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Last_name Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"Lawson\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"avatar\": {",
							"            \"$id\": \"#/properties/data/items/properties/avatar\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Avatar Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"https://s3.amazonaws.com/uifaces/faces/twitter/follettkyle/128.jpg\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          }",
							"        }",
							"      }",
							"    }",
							"  }",
							"",
							"};",
							"",
							"//var jsondata=JSON.parse(responsseBody);",
							"  var jsonData2 = pm.response.json();",
							"",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData2, schema)).to.be.true;",
							"  pm.expect(tv4.validate(jsonData2, schema)).to.be.true;",
							"});",
							"",
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"excepected response time is ok \", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"pm.test(\"response must be valid and have a body\", function () {",
							"     // assert that the status code is 200",
							"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
							"     // assert that the response has a valid JSON body",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/users?page=2",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "users Copy Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bf832eb6-5765-441a-bfa9-c50098fb513d",
						"exec": [
							"",
							"",
							"var schema = {",
							"",
							"  \"definitions\": {},",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"$id\": \"http://example.com/root.json\",",
							"  \"type\": \"object\",",
							"  \"title\": \"The Root Schema\",",
							"  \"required\": [",
							"    \"page\",",
							"    \"per_page\",",
							"    \"total\",",
							"    \"total_pages\",",
							"    \"data\"",
							"  ],",
							"  \"properties\": {",
							"    \"page\": {",
							"      \"$id\": \"#/properties/page\",",
							"      \"type\": \"integer\",",
							"      \"title\": \"The Page Schema\",",
							"      \"default\": 0,",
							"      \"examples\": [",
							"        3",
							"      ]",
							"    },",
							"    \"per_page\": {",
							"      \"$id\": \"#/properties/per_page\",",
							"      \"type\": \"integer\",",
							"      \"title\": \"The Per_page Schema\",",
							"      \"default\": 0,",
							"      \"examples\": [",
							"        3",
							"      ]",
							"    },",
							"    \"total\": {",
							"      \"$id\": \"#/properties/total\",",
							"      \"type\": \"integer\",",
							"      \"title\": \"The Total Schema\",",
							"      \"default\": 0,",
							"      \"examples\": [",
							"        12",
							"      ]",
							"    },",
							"    \"total_pages\": {",
							"      \"$id\": \"#/properties/total_pages\",",
							"      \"type\": \"integer\",",
							"      \"title\": \"The Total_pages Schema\",",
							"      \"default\": 0,",
							"      \"examples\": [",
							"        4",
							"      ]",
							"    },",
							"    \"data\": {",
							"      \"$id\": \"#/properties/data\",",
							"      \"type\": \"array\",",
							"      \"title\": \"The Data Schema\",",
							"      \"items\": {",
							"        \"$id\": \"#/properties/data/items\",",
							"        \"type\": \"object\",",
							"        \"title\": \"The Items Schema\",",
							"        \"required\": [",
							"          \"id\",",
							"          \"first_name\",",
							"          \"last_name\",",
							"          \"avatar\"",
							"        ],",
							"        \"properties\": {",
							"          \"id\": {",
							"            \"$id\": \"#/properties/data/items/properties/id\",",
							"            \"type\": \"integer\",",
							"            \"title\": \"The Id Schema\",",
							"            \"default\": 0,",
							"            \"examples\": [",
							"              7",
							"            ]",
							"          },",
							"          \"first_name\": {",
							"            \"$id\": \"#/properties/data/items/properties/first_name\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The First_name Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"Michael\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"last_name\": {",
							"            \"$id\": \"#/properties/data/items/properties/last_name\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Last_name Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"Lawson\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          },",
							"          \"avatar\": {",
							"            \"$id\": \"#/properties/data/items/properties/avatar\",",
							"            \"type\": \"string\",",
							"            \"title\": \"The Avatar Schema\",",
							"            \"default\": \"\",",
							"            \"examples\": [",
							"              \"https://s3.amazonaws.com/uifaces/faces/twitter/follettkyle/128.jpg\"",
							"            ],",
							"            \"pattern\": \"^(.*)$\"",
							"          }",
							"        }",
							"      }",
							"    }",
							"  }",
							"",
							"};",
							"",
							"//var jsondata=JSON.parse(responsseBody);",
							"  var jsonData2 = pm.response.json();",
							"",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData2, schema)).to.be.true;",
							"  pm.expect(tv4.validate(jsonData2, schema)).to.be.true;",
							"});",
							"",
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"excepected response time is ok \", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"pm.test(\"response must be valid and have a body\", function () {",
							"     // assert that the status code is 200",
							"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
							"     // assert that the response has a valid JSON body",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/users?page=2",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		}
	]
}